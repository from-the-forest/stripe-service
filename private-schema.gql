# relay pagination
type PageInfo {
    startCursor: String
    endCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
}

# ###################################################################
# Payment Methods 
# ###################################################################

input PaymentMethodsInput {
    first: Int = 10
    after: String
}

type PaymentMethod {
    id: String!
}

type PaymentMethodEdge {
    cursor: String!
    node: PaymentMethod!
}

type PaymentMethodsConnection {
    pageInfo: PageInfo!
    edges: [PaymentMethodEdge!]!
}

# ###################################################################
# Subscriptions 
# ###################################################################

input SubscriptionsInput {
    first: Int = 10
    after: String
}

type Subscription {
    id: String!
}

type SubscriptionEdge {
    cursor: String!
    node: Subscription!
}

type SubscriptionsConnection {
    pageInfo: PageInfo!
    edges: [SubscriptionEdge!]!
}

# ###################################################################
# Charges 
# ###################################################################

input ChargesInput {
    first: Int = 10
    after: String
}

type Charge {
    id: String!
}

type ChargeEdge {
    cursor: String!
    node: Charge!
}

type ChargesConnection {
    pageInfo: PageInfo!
    edges: [ChargeEdge!]!
}

# ###################################################################
# Prices - Associated with a product
# ###################################################################

input PricesInput {
    first: Int = 10
    after: String
}

type Price {
    id: ID!
    currency: String!
    type: String!
    interval: String
    amount: Int!
    formattedAmount: String!
}

type PriceEdge {
    cursor: String!
    node: Price!
}

type PricesConnection {
    pageInfo: PageInfo!
    edges: [PriceEdge!]!
}

# ###################################################################
# Products - What you sell; both physical and digial
# ###################################################################

input SearchProductsInput {
    first: Int = 10
    after: String
}

type Product {
    id: String!
    name: String!
    description: String!
    images: [String!]!
    shippable: Boolean
    prices(input: PricesInput): PricesConnection!
}

type SearchProductsEdge {
    cursor: String!
    node: Product!
}

type SerachProductsConnection {
    pageInfo: PageInfo!
    edges: [SearchProductsEdge!]!
}

# ###################################################################
# Promotion Codes 
# ###################################################################

input SearchPromotionCodesInput {
    first: Int = 10
    after: String
}

type PromotionCode {
    id: String!
    code: String!
}

type PromotionCodeEdge {
    cursor: String!
    node: PromotionCode!
}

type SearchPromotionCodesConnection {
    pageInfo: PageInfo!
    edges: [PromotionCodeEdge!]!
}

# ###################################################################
# Mutation.deletePaymentMethod
# ###################################################################

input DeletePaymentMethodInput {
    paymentMethodId: String! 
}

# ###################################################################
# Queries & Mutations
# ###################################################################

type Query {
    # NOTE: private graph is a superset of the public graph. so this is duplicated
    "Stripe Products (used for physical products and subscriptions)"
    searchProducts(input: SearchProductsInput): SerachProductsConnection!

    "Stripe Promotion Codes [Stripe Coupons](https://dashboard.stripe.com/test/coupons) [Docs](https://stripe.com/docs/api/promotion_codes)"
    searchPromotionCodes(input: SearchPromotionCodesInput): SearchPromotionCodesConnection!
}

type Mutation {
    # it seems like you can create payment methods right from the client?
    # https://stripe.com/docs/js/payment_methods/create_payment_method
    # createPaymentMethod(input: CreatePaymentMethodInput!): PaymentMethod!
    deletePaymentMethod(input: DeletePaymentMethodInput!): PaymentMethod!

    # create AND update
    # subscribe(input: SubscribeInput):  Subscription!
    # unsubscribe: Subscription!

    # checkout?
}

# ###################################################################
# Remote Types
# ###################################################################

# This is a "stub" of the User entity so this service has a complete graph
extend type User @key(fields: "id") {
    id: ID! @external
    charges(input: ChargesInput): ChargesConnection!
    subscriptions(input: SubscriptionsInput): SubscriptionsConnection!
    paymentMethods(input: PaymentMethodsInput): PaymentMethodsConnection!
}

# extend interface Node {
#     id: ID! @external
# }
